on:
  push:
    branches:
      - develop
      - main
  pull_request:

env:
  AWS_REGION: ap-southeast-1
  IMAGE_TAG: ${{ github.sha }}

name: Deploy branch
jobs:
  build_environment:
    name: Build Environment
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Cache Python Module
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up poetry cache env
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        run: echo "POETRY_CACHE_DIR=~/.cache/pypoetry" >> $GITHUB_ENV
      - name: Set up Environment
        run: |
          poetry install

  checks:
    name: Linting and Tests
    runs-on: ubuntu-20.04
    needs: build_environment
    env:
      POETRY_CACHE_DIR: ~/.cache/pypoetry
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    - name: Cache Python Module
      uses: actions/cache@v2
      id: poetry-cache
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Environment
      run: |
        poetry install
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: 12
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.cache-name }}-
          ${{ runner.os }}-node-
    - name: Install Node dependencies and pyright
      run: |
        npm ci
    - name: Run all pre-commit lints including tests
      run: |
        poetry run pre-commit run --all-files

  serverless_validate:
    name: Validate serverless config
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: 12
    - name: Install serverless dependencies
      run: |
        npm ci
    - name: Validate serverless config
      run: |
        npx serverless print

  serverless_deploy_dev:
    name: Deploy Serverless Stack (Development)
    runs-on: ubuntu-20.04
    needs: [checks, serverless_validate]
    environment: development
    if: github.event_name == 'push' && endsWith(github.ref, '/develop')
    env:
      POETRY_CACHE_DIR: ~/.cache/pypoetry
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Cache Python Module
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Environment
        run: |
          poetry install
      - name: Install serverless dependencies
        run: |
          npm ci
      - name: Serverless Deploy
        run: |
          npx serverless deploy --stage dev

  serverless_deploy_prod:
    name: Deploy Serverless Stack (Production)
    runs-on: ubuntu-20.04
    needs: [checks, serverless_validate]
    environment: production
    if: github.event_name == 'push' && endsWith(github.ref, '/main')
    env:
      POETRY_CACHE_DIR: ~/.cache/pypoetry
      # lambda.manager.user
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Cache Python Module
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Environment
        run: |
          poetry install
      - name: Install serverless dependencies
        run: |
          npm ci
      - name: Serverless Deploy
        run: |
          npx serverless deploy --stage prod
